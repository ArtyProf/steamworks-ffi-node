name: Deploy to npm

on:
  push:
    branches: [ main ]
    paths:
      - 'package.json'

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build TypeScript
      run: npm run build
    
    - name: Check build output
      shell: bash
      run: |
        if [ -f "dist/index.js" ] && [ -f "dist/index.d.ts" ]; then
          echo "✅ Build files exist"
          ls dist/ 2>/dev/null || dir dist\ || echo "Listing not available"
        else
          echo "❌ Required build files missing"
          exit 1
        fi
    
    - name: Verify package can be required
      run: node -e "const steam = require('./dist/index.js'); console.log('✅ Package loads successfully');"

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: TypeScript type check
      run: npx tsc --noEmit
    
    - name: Check package.json
      run: |
        node -e "const pkg = require('./package.json'); if (!pkg.main || !pkg.types) throw new Error('Missing main or types in package.json')"

  check-version:
    name: Check Version Change
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.version_check.outputs.changed }}
      version: ${{ steps.version_check.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Check if version changed
      id: version_check
      run: |
        # Get current version
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        
        # Get previous version (from previous commit)
        git checkout HEAD~1 -- package.json 2>/dev/null || echo "No previous commit"
        PREVIOUS_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "none")
        echo "Previous version: $PREVIOUS_VERSION"
        
        # Restore current package.json
        git checkout HEAD -- package.json
        
        # Check if version changed
        if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "✅ Version changed: $PREVIOUS_VERSION → $CURRENT_VERSION"
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "⚠️ Version not changed, skipping publish"
        fi

  publish:
    name: Publish to npm
    needs: [test, lint, check-version]
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.changed == 'true'
    permissions:
      contents: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build TypeScript
      run: npm run build
    
    - name: Verify build
      shell: bash
      run: |
        echo "Checking build output..."
        
        # Check required files exist
        FILES=("dist/index.js" "dist/index.d.ts" "dist/steam.js" "dist/types.js")
        for file in "${FILES[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file exists"
          else
            echo "❌ $file missing"
            exit 1
          fi
        done
        
        echo "✅ All required files present"
    
    - name: Test package
      run: |
        node -e "const steam = require('./dist/index.js'); console.log('✅ Package loads successfully');"
    
    - name: Publish to npm
      run: npm publish --tag latest --provenance --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Create Git tag
      run: |
        VERSION="v${{ needs.check-version.outputs.version }}"
        echo "Creating tag: $VERSION"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "$VERSION" -m "Release $VERSION"
        git push origin "$VERSION"
    
    - name: Generate release notes
      id: release_notes
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION="v${{ needs.check-version.outputs.version }}"
        
        # Get last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          echo "📝 Generating release notes from all history..."
          RANGE=""
          SINCE_DATE=$(git log --reverse --format=%ci | head -1)
        else
          echo "📝 Generating release notes from ${LAST_TAG}...HEAD"
          RANGE="${LAST_TAG}..HEAD"
          SINCE_DATE=$(git log -1 --format=%ci ${LAST_TAG})
        fi
        
        # Get merged pull requests with GitHub CLI
        echo "### 🔀 Merged Pull Requests" > release_notes.md
        echo "" >> release_notes.md
        
        if command -v gh &> /dev/null; then
          if [ -z "$LAST_TAG" ]; then
            gh pr list --state merged --limit 20 --json number,title,author --jq '.[] | "- #\(.number): \(.title) by @\(.author.login)"' >> release_notes.md || echo "_No pull requests found_" >> release_notes.md
          else
            gh pr list --state merged --search "merged:>=$(date -d "$SINCE_DATE" +%Y-%m-%d 2>/dev/null || date -j -f "%Y-%m-%d %H:%M:%S" "$SINCE_DATE" +%Y-%m-%d)" --limit 20 --json number,title,author --jq '.[] | "- #\(.number): \(.title) by @\(.author.login)"' >> release_notes.md || echo "_No pull requests found_" >> release_notes.md
          fi
        else
          # Fallback: Extract PR numbers from merge commits
          if [ -n "$RANGE" ]; then
            git log ${RANGE} --pretty=format:"%s" --grep="Merge pull request" | \
              sed -n 's/.*#\([0-9]*\).*/- PR #\1/p' | head -20 >> release_notes.md
          fi
          [ -s release_notes.md ] || echo "_No pull requests found_" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "### 📝 Commits" >> release_notes.md
        echo "" >> release_notes.md
        
        # Get commit messages
        if [ -z "$RANGE" ]; then
          git log --pretty=format:"- %s (%h)" --no-merges | head -30 >> release_notes.md
        else
          git log ${RANGE} --pretty=format:"- %s (%h)" --no-merges | head -30 >> release_notes.md
        fi
        
        # Add installation and links
        cat >> release_notes.md << EOF
        
        ## 📦 Installation
        
        \`\`\`bash
        npm install steamworks-ffi-node
        \`\`\`
        
        Or install this specific version:
        
        \`\`\`bash
        npm install steamworks-ffi-node@${{ needs.check-version.outputs.version }}
        \`\`\`
        
        ## 📚 Links
        
        - [GitHub Repository](https://github.com/ArtyProf/steamworks-ffi-node)
        - [npm Package](https://www.npmjs.com/package/steamworks-ffi-node)
        - [Documentation](https://github.com/ArtyProf/steamworks-ffi-node#readme)
        
        ---
        
        **Full Changelog**: https://github.com/ArtyProf/steamworks-ffi-node/compare/${LAST_TAG}...${VERSION}
        EOF
        
        echo "✅ Release notes created"
        cat release_notes.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.check-version.outputs.version }}
        name: Release v${{ needs.check-version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create summary
      run: |
        echo "## 🚀 Published to npm" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Package**: steamworks-ffi-node" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ needs.check-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag**: latest" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: https://www.npmjs.com/package/steamworks-ffi-node" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🏷️ GitHub Release Created" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag**: v${{ needs.check-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Release**: https://github.com/ArtyProf/steamworks-ffi-node/releases/tag/v${{ needs.check-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Installation" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "npm install steamworks-ffi-node" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
